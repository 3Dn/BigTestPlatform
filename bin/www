#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('BigTestPlatform:server');
var http = require('http');
var events = require('events');

var db = require('./db.js');
var udp = require('./udp.js');
var ws = require('./ws.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.io
 */

var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * Main code
 */

var scales1 = [];
var scales2 = [];

var eventEmitter = new events.EventEmitter();
var ws1 = function ws1(str){
  io.emit('ws', {data: str});
}

io.on('connection', function(socket){
  console.log('User connected!');
  socket.emit('on_connect', { 'data': 'data'});

  socket.on('ready', function(){
    console.log('Client ready!');
    db.data_for_chart('scale1_log', function(ret){
      //socket.emit('chart_data', {'data_1': ret});
      scales1 = ret;
    });
    db.data_for_chart('scale2_log', function(ret){
      //socket.emit('chart_data', {'data_2': ret});
      scales2 = ret;
    });
    socket.emit('chart_data', {'data_1': scales1, 'data_2': scales2});
  });

  socket.on('disconnect', function(){
    console.log('User disconnected!');
  })
});


eventEmitter.addListener('ws', ws1);

exports.eventEmitter = eventEmitter;